{"version":3,"sources":["Assets/icons/star.svg","useSearchForm.js","Utils/API_data.js","Components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["useSearchForm","useState","searchTitleTemp","setSearchTitleTemp","searchTitle","setSearchTitle","movieList","setMovieList","movieNotFound","setMovieNotFound","nominations","setNominations","useEffect","nominationslist","JSON","parse","window","localStorage","getItem","setItem","stringify","getMovieList","search","axios","get","process","then","response","data","Search","ids","map","movie","imdbID","filter","index","includes","nominated","catch","error","console","log","handleSearch","event","target","value","handleKeyPress","key","preventDefault","handleSubmit","handleAddNominate","nominatedMovie","prevArray","movieListUpdated","handleRemoveNominate","newNominateList","nomination","Home","className","onSubmit","htmlFor","name","placeholder","onKeyPress","onChange","type","length","src","star","alt","Title","Year","disabled","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,G,kBAAA,IAA0B,kC,sCCiG1BA,EA3FO,WAAM,IAAD,EACuBC,mBAAS,IADhC,mBAChBC,EADgB,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAEhBG,EAFgB,KAEHC,EAFG,OAGWJ,mBAAS,IAHpB,mBAGhBK,EAHgB,KAGLC,EAHK,OAImBN,oBAAS,GAJ5B,mBAIhBO,EAJgB,KAIDC,EAJC,OAKeR,mBAAS,IALxB,mBAKhBS,EALgB,KAKHC,EALG,KASvBC,qBAAU,WACN,IAAIC,EAAkBC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,gBAC1DL,GAAiBF,EAAe,YAAIE,MACxC,IAIHD,qBAAU,WACNI,OAAOC,aAAaE,QAAQ,cAAeL,KAAKM,UAAUV,MAC3D,CAACA,IAIJ,IA4CMW,EAAe,SAACC,GAClBC,IACKC,IADL,UCvEQ,mCDuER,OArESC,WAqET,cACoCH,IAC/BI,MAAK,SAAAC,GACF,GAAGA,EAASC,KAAKC,OAAO,CACpB,IAAIC,EAAMH,EAASC,KAAKC,OAAOE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,UAM9C3B,EAFOqB,EAASC,KAAKC,OAAOK,QAChB,WAAWC,GAAX,IAAEF,EAAF,EAAEA,OAAF,OAAsBH,EAAIM,SAASH,EAAQE,EAAM,MAC5CJ,KAAI,SAAAC,GAAK,kCAASA,GAAT,IAAgBK,WAAW,OACzD9B,EAAa,YAAID,IACjBG,GAAiB,QAEjBA,GAAiB,GACjBF,EAAa,OAGpB+B,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sBAAuBF,OAE3D,MAAO,CAACrC,kBAAiBE,cAAaE,YAAWE,gBAAeE,cACxDgC,aAlEa,SAACC,GAClBxC,EAAmBwC,EAAMC,OAAOC,QAiEdC,eA5DC,SAACH,GACF,UAAdA,EAAMI,MACNJ,EAAMK,iBACN3C,EAAeH,GACfmB,EAAanB,KAwDiB+C,aAlDjB,SAACN,GAClBA,EAAMK,iBACN3C,EAAeH,GACfmB,EAAanB,IAgDTgD,kBA5CkB,SAACP,EAAOQ,GAC9BxC,GAAe,SAAAyC,GAAS,4BAAQA,GAAR,CAAmBD,OAC3C,IAAIE,EAAmB/C,EAAUyB,KAAI,SAAAC,GAAK,OACtCA,EAAMC,SAAWkB,EAAelB,OAAhC,2BAA2CD,GAA3C,IAAkDK,WAAW,IAA7D,eAAwEL,MAE5EzB,EAAa8C,IAuCUC,qBAlCE,SAACX,EAAOQ,GACjC,IAAII,EAAkB7C,EAAYwB,QAAO,SAAAsB,GAAU,OAAIA,EAAWvB,SAAWkB,EAAelB,UAC5FtB,EAAe,YAAI4C,IACnB,IAAIF,EAAmB/C,EAAUyB,KAAI,SAAAC,GAAK,OACtCA,EAAMC,SAAWkB,EAAelB,OAAhC,2BAA2CD,GAA3C,IAAkDK,WAAW,IAA7D,eAAyEL,MAE7EzB,EAAa8C,M,OEsBNI,EApFF,WAAO,IAAD,EAGmCzD,IAF3CE,EADQ,EACRA,gBAAiBE,EADT,EACSA,YAAaE,EADtB,EACsBA,UAAWE,EADjC,EACiCA,cAAeE,EADhD,EACgDA,YACxDgC,EAFQ,EAERA,aAAcI,EAFN,EAEMA,eAAgBG,EAFtB,EAEsBA,aAC9BC,EAHQ,EAGRA,kBAAmBI,EAHX,EAGWA,qBAE1B,OACI,0BAASI,UAAU,OAAnB,UACI,oBAAIA,UAAU,gBAAd,0BACA,uBAAMA,UAAU,oBAAoBC,SAAUV,EAA9C,UACI,uBAAOS,UAAU,cAAcE,QAAQ,aAAvC,0BACA,uBAAOF,UAAU,sBAAsBG,KAAK,aAAaC,YAAY,cACjEjB,MAAO3C,EAAiB6D,WAAYjB,EACpCkB,SAAUtB,IAEd,uBAAOgB,UAAU,wBAAwBO,KAAK,SAASpB,MAAM,cAEjE,sBAAKa,UAAU,kBAAf,UACI,sBAAKA,UAAW,oBAAhB,UACKlD,GAAiBF,GAAY,EAC9B,qBAAKoD,UAAU,uBAAf,SACI,4BACKlD,EAAc,uBAAD,OAAyBJ,EAAzB,8BAGpB,GAEDE,EAAU4D,OAAS,EACpB,gCACI,qBAAIR,UAAU,iDAAd,0BAA6EtD,EAA7E,OACA,oBAAIsD,UAAU,aAAd,SACKpD,EAAUyB,KAAI,SAAAC,GAAK,OACpB,qBAAI0B,UAAU,aAAd,UACI,uBAAMA,UAAU,kBAAhB,UACI,qBAAKA,UAAU,iBAAiBS,IAAKC,EAAMC,IAAI,cAC9CrC,EAAMsC,MAFX,KAEoBtC,EAAMuC,KAF1B,OAIA,wBAAQb,UAAU,0BACVc,SAAUxC,EAAMK,UAChBoC,QAAS,SAAC9B,GAAD,OAAWO,EAAkBP,EAAOX,IAFrD,wBAL4BA,EAAMC,gBAatC,MAGZ,qBAAKyB,UAAU,oBAAf,SACKhD,EAAYwD,OAAS,EACtB,gCACI,oBAAIR,UAAU,iDAAd,yBAGChD,EAAYwD,QAAU,EACvB,qBAAKR,UAAU,6DAAf,SACI,oDAAuBhD,EAAYwD,OAAnC,kBAEF,GAEF,oBAAIR,UAAU,aAAd,SACKhD,EAAYqB,KAAI,SAAAyB,GAAU,OAC3B,qBAAIE,UAAU,aAAd,UACI,uBAAMA,UAAU,kBAAhB,UACI,qBAAKA,UAAU,iBAAiBS,IAAKC,EAAMC,IAAI,cAC9Cb,EAAWc,MAFhB,KAEyBd,EAAWe,KAFpC,OAIA,wBAAQb,UAAU,0BACVe,QAAS,SAAC9B,GAAD,OAAWW,EAAqBX,EAAOa,IADxD,sBAL4BA,EAAWvB,gBAcnD,qBAAKyB,UAAU,uBAAf,SACI,6ECrETgB,MARf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d35e4826.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/star.ecf2636e.svg\";","\r\nimport {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {baseURL} from './Utils/API_data'; \r\nconst OMDB_API = process.env.REACT_APP_OMDB_API;\r\n\r\nconst useSearchForm = () =>{\r\n    const [searchTitleTemp, setSearchTitleTemp] = useState('');\r\n    const [searchTitle, setSearchTitle] = useState('');\r\n    const [movieList, setMovieList] = useState([]);\r\n    const [movieNotFound, setMovieNotFound] = useState(false)\r\n    const [nominations, setNominations] = useState([]);\r\n\r\n// useEffect to get nominations from localStorage:\r\n\r\n    useEffect(() =>{\r\n        let nominationslist = JSON.parse(window.localStorage.getItem('nominations'));\r\n        if(nominationslist) setNominations([...nominationslist])\r\n    }, []);\r\n\r\n// useEffect to set nominations in localStorage:\r\n\r\n    useEffect(() =>{\r\n        window.localStorage.setItem('nominations', JSON.stringify(nominations));\r\n    }, [nominations])\r\n    \r\n// search input onChange event handler:\r\n\r\n    const handleSearch = (event) => {\r\n        setSearchTitleTemp(event.target.value);\r\n    }\r\n\r\n// get movie list when enter is pressed:\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            event.preventDefault();\r\n            setSearchTitle(searchTitleTemp);\r\n            getMovieList(searchTitleTemp);\r\n        }\r\n    }\r\n\r\n// handle search submit:\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        setSearchTitle(searchTitleTemp);\r\n        getMovieList(searchTitleTemp);\r\n    }\r\n// add nominate handler:\r\n\r\n    const handleAddNominate = (event, nominatedMovie) =>{\r\n        setNominations(prevArray => [...prevArray, nominatedMovie])\r\n        let movieListUpdated = movieList.map(movie => \r\n            movie.imdbID === nominatedMovie.imdbID?{...movie, nominated: true}: {...movie} \r\n        );\r\n        setMovieList(movieListUpdated)\r\n    }\r\n\r\n// remove nominate handler:\r\n\r\n    const handleRemoveNominate = (event, nominatedMovie) =>{\r\n        let newNominateList = nominations.filter(nomination => nomination.imdbID !== nominatedMovie.imdbID );\r\n        setNominations([...newNominateList]);\r\n        let movieListUpdated = movieList.map(movie => \r\n            movie.imdbID === nominatedMovie.imdbID?{...movie, nominated: false}: {...movie} \r\n        );\r\n        setMovieList(movieListUpdated)\r\n    }\r\n\r\n// axios request to get movieList:\r\n\r\n    const getMovieList = (search) => {\r\n        axios\r\n            .get(`${baseURL}${OMDB_API}&s=${search}`)\r\n            .then(response => {\r\n                if(response.data.Search){\r\n                    let ids = response.data.Search.map(movie => movie.imdbID);\r\n\r\n                    // removes the duplicate data by imdbID:\r\n\r\n                    let list = response.data.Search.filter(\r\n                                    ({imdbID}, index) => !ids.includes(imdbID, index+1));\r\n                    let movieList = list.map(movie => ({...movie, nominated: false}));\r\n                    setMovieList([...movieList]);\r\n                    setMovieNotFound(false);\r\n                } else {\r\n                    setMovieNotFound(true);\r\n                    setMovieList([]);\r\n                };\r\n            })\r\n            .catch(error => console.log('error in movie data', error));\r\n    }\r\n    return {searchTitleTemp, searchTitle, movieList, movieNotFound, nominations, \r\n            handleSearch, handleKeyPress, handleSubmit, \r\n            handleAddNominate, handleRemoveNominate}\r\n}\r\nexport default useSearchForm;","\r\n\r\nconst baseURL = 'http://www.omdbapi.com/?apikey='\r\n\r\nexport { baseURL };","import React from 'react';\r\nimport './Home.scss';\r\nimport star from '../../Assets/icons/star.svg';\r\nimport useSearchForm from '../../useSearchForm';\r\n\r\nconst Home = () => {\r\n    const {searchTitleTemp, searchTitle, movieList, movieNotFound, nominations, \r\n           handleSearch, handleKeyPress, handleSubmit,\r\n           handleAddNominate, handleRemoveNominate} = useSearchForm();\r\n    \r\n    return (\r\n        <section className='home'>\r\n            <h1 className='home__heading'>The Shoppies</h1>\r\n            <form className='home__movieSearch' onSubmit={handleSubmit}>\r\n                <label className='input-label' htmlFor='movieTitle'>Movie title </label>\r\n                <input className='input input--search' name='movieTitle' placeholder='movie title'\r\n                    value={searchTitleTemp} onKeyPress={handleKeyPress}\r\n                    onChange={handleSearch}\r\n                />\r\n                <input className='button button--search' type='submit' value='Search'/>\r\n            </form>\r\n            <div className='home__movieInfo'>\r\n                <div className= 'home__movieResult'>\r\n                    {movieNotFound || movieList <=0?\r\n                    <div className='home__messageHeading'>\r\n                        <p>\r\n                            {movieNotFound? `No movie found for \"${searchTitle}\"`: `Search any movie!!`}\r\n                        </p>\r\n                    </div>\r\n                    : ''\r\n                    }\r\n                    {movieList.length > 0 ?\r\n                    <div>\r\n                        <h2 className='home__subHeading home__subHeading--movieResult'>Results for \"{searchTitle}\"</h2>\r\n                        <ul className='home__list'>\r\n                            {movieList.map(movie =>\r\n                            <li className='home__item' key={movie.imdbID}>\r\n                                <span className='home__movieName'>\r\n                                    <img className='home__starIcon' src={star} alt='star icon'/>\r\n                                    {movie.Title} ({movie.Year})\r\n                                </span>\r\n                                <button className='button button--nominate' \r\n                                        disabled={movie.nominated}\r\n                                        onClick={(event) => handleAddNominate(event, movie)}>\r\n                                        Nominate\r\n                                </button>\r\n                            </li>\r\n                            )}\r\n                        </ul>\r\n                    </div>: ''\r\n                    }\r\n                </div>\r\n                <div className='home__movieResult'>\r\n                    {nominations.length > 0?\r\n                    <div>\r\n                        <h2 className='home__subHeading home__subHeading--movieResult'>\r\n                            Nominations\r\n                        </h2>\r\n                        {nominations.length >= 5? \r\n                        <div className='home__messageHeading home__messageHeading--nominationsMore'>\r\n                            <p>You have nominated {nominations.length} movies!!!</p>\r\n                        </div>\r\n                        : ''\r\n                        }\r\n                        <ul className='home__list'>\r\n                            {nominations.map(nomination =>\r\n                            <li className='home__item' key={nomination.imdbID}>\r\n                                <span className='home__movieName'>\r\n                                    <img className='home__starIcon' src={star} alt='star icon'/>\r\n                                    {nomination.Title} ({nomination.Year})\r\n                                </span>\r\n                                <button className='button button--nominate'\r\n                                        onClick={(event) => handleRemoveNominate(event, nomination)}>\r\n                                    Remove\r\n                                </button>\r\n                            </li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    : \r\n                    <div className='home__messageHeading'>\r\n                        <p> Nominate your favourite movie!! </p>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default Home;","import './App.scss';\n\nimport Home from './Components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}